/**
 * Generate js/config.js from env.yaml
 * This script reads env.yaml and creates a JavaScript config file for browser usage
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

// Paths
const envPath = path.join(__dirname, 'env.yaml');
const configPath = path.join(__dirname, 'js', 'config.js');

console.log('üîß Generating config.js from env.yaml...');

try {
  // Read env.yaml
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå env.yaml not found! Please create env.yaml first.');
    process.exit(1);
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  const config = yaml.load(envContent);

  console.log('‚úÖ env.yaml loaded successfully');

  // Generate JavaScript config file
  const jsContent = `/**
 * RumahSubsidi.id - Configuration
 * Auto-generated from env.yaml
 * DO NOT EDIT THIS FILE DIRECTLY - Edit env.yaml instead and run: node generate-config.js
 */

const APP_CONFIG = ${JSON.stringify(config, null, 2)};

// Freeze config to prevent modifications
Object.freeze(APP_CONFIG);

// Helper function to get nested config values
function getConfig(path) {
  return path.split('.').reduce((obj, key) => obj?.[key], APP_CONFIG);
}

// Export for Node.js (if running in Node environment)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { APP_CONFIG, getConfig };
}
`;

  // Write to js/config.js
  fs.writeFileSync(configPath, jsContent, 'utf8');

  console.log('‚úÖ config.js generated successfully at:', configPath);
  console.log('');
  console.log('Configuration Summary:');
  console.log(`  - App Name: ${config.app.name}`);
  console.log(`  - Environment: ${config.app.environment}`);
  console.log(`  - Web Server: ${config.server.web.baseURL}`);
  console.log(`  - Proxy Server: ${config.server.proxy.baseURL}`);
  console.log(`  - Sikumbang API: ${config.api.sikumbang.baseURL}`);
  console.log('');
  console.log('‚ú® Done! You can now use APP_CONFIG in your JavaScript files.');

} catch (error) {
  console.error('‚ùå Error generating config:', error.message);
  process.exit(1);
}
